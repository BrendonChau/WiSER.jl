var documenterSearchIndex = {"docs":
[{"location":"model_fitting/#Model-Fitting","page":"Model Fitting","title":"Model Fitting","text":"","category":"section"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"WiSER.jl implements a regression method for modeling the within-subject variability of a longitudinal measurement. It stands for within-subject variance estimation by robust regression. ","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"Here we cover model construction and parameter estimation using WiSER.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"using CSV, DataFrames, WiSER","category":"page"},{"location":"model_fitting/#Example-data","page":"Model Fitting","title":"Example data","text":"","category":"section"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"The example dataset, sbp.csv, is contained in data folder of the package. It is a simulated datatset with 500 individuals, each having 9~11 observations. The outcome, systolic blood pressure (SBP), is a function of other covariates. Below we read in the data as a DataFrame using the CSV package. WiSER.jl can take other data table objects that comply with the Tables.jl format, such as IndexedTables from the JuliaDB package.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"filepath = normpath(joinpath(dirname(pathof(WiSER)), \"../data/\"))\ndf = DataFrame!(CSV.File(filepath * \"sbp.csv\"))","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"<table class=\"data-frame\"><thead><tr><th></th><th>id</th><th>sbp</th><th>agegroup</th><th>gender</th><th>bmi</th><th>meds</th><th>bmi_std</th></tr><tr><th></th><th>Int64</th><th>Float64</th><th>Float64</th><th>String</th><th>Float64</th><th>String</th><th>Float64</th></tr></thead><tbody><p>5,011 rows × 7 columns</p><tr><th>1</th><td>1</td><td>159.586</td><td>3.0</td><td>Male</td><td>23.1336</td><td>NoMeds</td><td>-1.57733</td></tr><tr><th>2</th><td>1</td><td>161.849</td><td>3.0</td><td>Male</td><td>26.5885</td><td>NoMeds</td><td>1.29927</td></tr><tr><th>3</th><td>1</td><td>160.484</td><td>3.0</td><td>Male</td><td>24.8428</td><td>NoMeds</td><td>-0.154204</td></tr><tr><th>4</th><td>1</td><td>161.134</td><td>3.0</td><td>Male</td><td>24.9289</td><td>NoMeds</td><td>-0.0825105</td></tr><tr><th>5</th><td>1</td><td>165.443</td><td>3.0</td><td>Male</td><td>24.8057</td><td>NoMeds</td><td>-0.185105</td></tr><tr><th>6</th><td>1</td><td>160.053</td><td>3.0</td><td>Male</td><td>24.1583</td><td>NoMeds</td><td>-0.72415</td></tr><tr><th>7</th><td>1</td><td>162.1</td><td>3.0</td><td>Male</td><td>25.2543</td><td>NoMeds</td><td>0.188379</td></tr><tr><th>8</th><td>1</td><td>163.153</td><td>3.0</td><td>Male</td><td>24.3951</td><td>NoMeds</td><td>-0.527037</td></tr><tr><th>9</th><td>1</td><td>166.675</td><td>3.0</td><td>Male</td><td>26.1514</td><td>NoMeds</td><td>0.935336</td></tr><tr><th>10</th><td>2</td><td>130.765</td><td>1.0</td><td>Male</td><td>22.6263</td><td>NoMeds</td><td>-1.99977</td></tr><tr><th>11</th><td>2</td><td>131.044</td><td>1.0</td><td>Male</td><td>24.7404</td><td>NoMeds</td><td>-0.239477</td></tr><tr><th>12</th><td>2</td><td>131.22</td><td>1.0</td><td>Male</td><td>25.3415</td><td>NoMeds</td><td>0.260949</td></tr><tr><th>13</th><td>2</td><td>131.96</td><td>1.0</td><td>Male</td><td>25.6933</td><td>NoMeds</td><td>0.553886</td></tr><tr><th>14</th><td>2</td><td>130.09</td><td>1.0</td><td>Male</td><td>21.7646</td><td>NoMeds</td><td>-2.71724</td></tr><tr><th>15</th><td>2</td><td>130.556</td><td>1.0</td><td>Male</td><td>23.7895</td><td>NoMeds</td><td>-1.03123</td></tr><tr><th>16</th><td>2</td><td>132.001</td><td>1.0</td><td>Male</td><td>26.9103</td><td>NoMeds</td><td>1.56716</td></tr><tr><th>17</th><td>2</td><td>131.879</td><td>1.0</td><td>Male</td><td>24.1153</td><td>NoMeds</td><td>-0.759929</td></tr><tr><th>18</th><td>2</td><td>131.609</td><td>1.0</td><td>Male</td><td>25.3372</td><td>NoMeds</td><td>0.257432</td></tr><tr><th>19</th><td>2</td><td>132.149</td><td>1.0</td><td>Male</td><td>23.7171</td><td>NoMeds</td><td>-1.09154</td></tr><tr><th>20</th><td>2</td><td>130.653</td><td>1.0</td><td>Male</td><td>25.5947</td><td>NoMeds</td><td>0.471793</td></tr><tr><th>21</th><td>3</td><td>145.655</td><td>2.0</td><td>Male</td><td>25.3645</td><td>NoMeds</td><td>0.280102</td></tr><tr><th>22</th><td>3</td><td>147.384</td><td>2.0</td><td>Male</td><td>26.6756</td><td>NoMeds</td><td>1.37179</td></tr><tr><th>23</th><td>3</td><td>146.558</td><td>2.0</td><td>Male</td><td>25.6001</td><td>NoMeds</td><td>0.476309</td></tr><tr><th>24</th><td>3</td><td>146.731</td><td>2.0</td><td>Male</td><td>26.3532</td><td>NoMeds</td><td>1.10337</td></tr><tr><th>25</th><td>3</td><td>143.037</td><td>2.0</td><td>Male</td><td>24.4092</td><td>NoMeds</td><td>-0.515285</td></tr><tr><th>26</th><td>3</td><td>144.845</td><td>2.0</td><td>Male</td><td>25.1193</td><td>NoMeds</td><td>0.075975</td></tr><tr><th>27</th><td>3</td><td>145.366</td><td>2.0</td><td>Male</td><td>25.5029</td><td>NoMeds</td><td>0.395354</td></tr><tr><th>28</th><td>3</td><td>145.506</td><td>2.0</td><td>Male</td><td>25.9668</td><td>NoMeds</td><td>0.781658</td></tr><tr><th>29</th><td>3</td><td>143.155</td><td>2.0</td><td>Male</td><td>24.9327</td><td>NoMeds</td><td>-0.0793522</td></tr><tr><th>30</th><td>3</td><td>146.147</td><td>2.0</td><td>Male</td><td>25.0029</td><td>NoMeds</td><td>-0.020953</td></tr><tr><th>&vellip;</th><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td></tr></tbody></table>","category":"page"},{"location":"model_fitting/#Formulate-model","page":"Model Fitting","title":"Formulate model","text":"","category":"section"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"First we will create a WSVarLmmModel object from the dataframe.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"The WSVarLmmModel() function takes the following arguments: ","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"meanformula: the formula for the mean fixed effects β (variables in X matrix).\nreformula: the formula for the mean random effects γ (variables in Z matrix).\nwsvarformula: the formula  for the within-subject variance fixed effects τ (variables in W matrix). \nidvar: the id variable for groupings. \ntbl: the datatable holding all of the data for the model. Can be a DataFrame or various types of tables that comply with Tables.jl formatting, such as an IndexedTable.\nwtvar: Optional argument of variable name holding subject-level weights in the tbl.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"For documentation of the WSVarLmmModel function, type ?WSVarLmmModel in Julia REPL.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"WSVarLmmModel","category":"page"},{"location":"model_fitting/#WiSER.WSVarLmmModel","page":"Model Fitting","title":"WiSER.WSVarLmmModel","text":"WSVarLmmModel\n\nWithin-subject variance linear mixed model, which contains a vector of  WSVarLmmObs as data, model parameters, and working arrays.\n\nWSVarLmmModel(obsvec; obswts, meannames, renames, wsvarnames)\n\nPositional arguments\n\nobsvec: Vector of WSVarLmmObs\n\nKeyword arguments\n\nobswts: Subject-level weight vector of observation weights, length of the obsvec object.\nmeannames: Names of the mean fixed effects covariates\nrenames: Names of the random location effects covariates\nwsvarnames: Names of the ws variance fixed effects covariates\n\n\n\n\n\n","category":"type"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"We will model sbp as a function of age, gender, and bmistd. `bmistdis the centered and scaledbmi`. The following commands fit the following model:","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"textsbp_ij = beta_0 + beta_1 textagegroup_ij + beta_2 textgender_ij + beta_3 textbmi_ij + gamma_i0 + gamma_i1textbmi + epsilon_ij","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"epsilon_ij","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"is distributed with mean 0 variance sigma^2_epsilon_ij","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"gamma_i = (gamma_i0 gamma_i1)","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"has mean 0 and variance Sigma_gamma","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"sigma^2_epsilon_ij = exp(tau_0 + tau_1 textagegroup_ij + tau_2 textgender_ij + tau_3 textbmi_ij)","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"vlmm = WSVarLmmModel(\n    @formula(sbp ~ 1 + agegroup + gender + bmi_std + meds), \n    @formula(sbp ~ 1 + bmi_std), \n    @formula(sbp ~ 1 + agegroup + meds + bmi_std),\n    :id, df);","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"The vlmm object has the appropriate data formalated above. We can now use the fit!() function to fit the model.","category":"page"},{"location":"model_fitting/#Fit-model","page":"Model Fitting","title":"Fit model","text":"","category":"section"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"Main arguments of the fit!() function are:","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"m::WSVarLmmModel: The model to fit.\nsolver: Non-linear programming solver to be used.\nruns::Integer: Number of weighted nonlinear least squares runs. Default is 2.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"For a complete documentation, type ?WSVarLmmModel in Julia REPL.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"fit!","category":"page"},{"location":"model_fitting/#WiSER.fit!","page":"Model Fitting","title":"WiSER.fit!","text":"fit!(m::WSVarLmmModel, \nsolver=IpoptSolver(print_level=0, mehrotra_algorithm=\"yes\", max_iter=100);\ninit=init_ls!(m), runs = 2)\n\nFit a WSVarLMMModel object using a weighted NLS method.\n\nPositional arguments\n\nm::WSVarLmmModel: Model to fit.\nsolver: Nonlinear programming solver to use. Common choices include:  \nIpopt.IpoptSolver(print_level=0, mehrotra_algorithm=\"yes\", warm_start_init_point=\"yes\", max_iter=100).\nIpopt.IpoptSolver(print_level=0, watchdog_shortened_iter_trigger=3, max_iter=100).\nIpopt.IpoptSolver(print_level=0, max_iter=100).\nKNITRO.KnitroSolver(outlev=3). (Knitro is commercial software)\nNLopt.NLoptSolver(algorithm=:LD_MMA, maxeval=4000).  \nNLopt.NLoptSolver(algorithm=:LD_LBFGS, maxeval=4000).\n\nKeyword arguments\n\ninit: Initialization strategy. fit! will use m.τ and m.Lγ to set the    weight matrices Vi and solve the weighted NLS to obtain an   estimate for m.β, m.τ, and m.Lγ.  Choices for init include  \ninit_ls!(m) (default): initialize by the least squares analytical solution.  \ninit_mom!(m): initialize by the unweighted NLS (MoM).  \nm: initilize from user supplied values in m.τ and m.Lγ.\nruns::Integer: Number of weighted NLS runs; default is 2. Each run will use the    newest m.τ and m.Lγ to update the weight matrices Vi and solve the    new weighted NLS.\nparallel::Bool: Multi-threading or not. Default is false. \nverbose::Bool: Verbose display or not, Default is true.\n\n\n\n\n\n","category":"function"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"WiSER.fit!(vlmm)","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"******************************************************************************\nThis program contains Ipopt, a library for large-scale nonlinear optimization.\n Ipopt is released as open source code under the Eclipse Public License (EPL).\n         For more information visit http://projects.coin-or.org/Ipopt\n******************************************************************************\n\nrun = 1, ‖Δβ‖ = 0.037311, ‖Δτ‖ = 0.166678, ‖ΔL‖ = 0.100999, status = Optimal, time(s) = 0.416875\nrun = 2, ‖Δβ‖ = 0.005220, ‖Δτ‖ = 0.006748, ‖ΔL‖ = 0.048735, status = Optimal, time(s) = 0.235812\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n───────────────────────────────────────────────────────────\n                     Estimate  Std. Error       Z  Pr(>|Z|)\n───────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308       0.14384    739.07    <1e-99\nβ2: agegroup       14.9844      0.0633245  236.63    <1e-99\nβ3: gender: Male   10.0749      0.100279   100.47    <1e-99\nβ4: bmi_std         0.296424    0.0139071   21.31    <1e-99\nβ5: meds: OnMeds  -10.1107      0.122918   -82.26    <1e-99\nτ1: (Intercept)    -2.5212      0.393792    -6.40    <1e-9\nτ2: agegroup        1.50759     0.135456    11.13    <1e-28\nτ3: meds: OnMeds   -0.435225    0.0621076   -7.01    <1e-11\nτ4: bmi_std         0.0052695   0.0224039    0.24    0.8140\n───────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00196    0.0181387\n \"γ2: bmi_std\"      0.0181387  0.000549357","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"The estimated coefficients and random effects covariance parameters can be retrieved by","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"coef(vlmm)","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"9-element Array{Float64,1}:\n 106.30828661757634\n  14.984423626293093\n  10.074886642511794\n   0.2964238570056941\n -10.11067764854548\n  -2.5211956122840617\n   1.507588202998947\n  -0.4352249760929703\n   0.005269501831413487","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"or individually","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"vlmm.β","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"5-element Array{Float64,1}:\n 106.30828661757634\n  14.984423626293093\n  10.074886642511794\n   0.2964238570056941\n -10.11067764854548","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"vlmm.τ","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"4-element Array{Float64,1}:\n -2.5211956122840617\n  1.507588202998947\n -0.4352249760929703\n  0.005269501831413487","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"vlmm.Σγ","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"2×2 Array{Float64,2}:\n 1.00196    0.0181387\n 0.0181387  0.000549357","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"The variance-covariance matrix of the estimated parameters (β, τ, Lγ) can be rerieved by","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"vlmm.vcov","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"12×12 Array{Float64,2}:\n  0.0206899    -0.00753187   -0.00618382   …  -0.000123531   0.0644858\n -0.00753187    0.00400999    0.000152994      4.07896e-5   -0.0194226\n -0.00618382    0.000152994   0.0100558        4.35497e-5   -0.0299542\n  5.60981e-5   -4.80751e-5    0.000108448      8.06623e-6    0.00149567\n -0.00311952   -0.000362412   0.00122535      -7.1571e-5     0.0168424\n -0.00652959    0.00207365    0.00276734   …   0.00217472   -1.70443\n  0.00229271   -0.000743467  -0.000951293     -0.000740359   0.58213\n -0.000719608   0.000263081   0.000294779      0.000197117  -0.152908\n  3.10756e-5    1.70391e-5   -0.00011849      -5.50781e-5    0.0266044\n  0.000166021  -3.24178e-6   -0.00011537       9.0954e-6    -0.00139559\n -0.000123531   4.07896e-5    4.35497e-5   …   7.84536e-5   -0.0244586\n  0.0644858    -0.0194226    -0.0299542       -0.0244586    19.1312","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"Confidence intervals for boldsymbolbeta boldsymboltau can be obtained by confint. By default it returns 95% confidence intervals (alpha level = 0.05). ","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"confint(vlmm)","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"9×2 Array{Float64,2}:\n 106.026      106.59\n  14.8603      15.1085\n   9.87834     10.2714\n   0.269167     0.323681\n -10.3516      -9.86976\n  -3.29301     -1.74938\n   1.2421       1.77308\n  -0.556954    -0.313496\n  -0.0386413    0.0491803","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"confint(vlmm, 0.1)","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"9×2 Array{Float64,2}:\n 106.29       106.326\n  14.9765      14.9924\n  10.0623      10.0875\n   0.294676     0.298171\n -10.1261     -10.0952\n  -2.57068     -2.47171\n   1.49057      1.52461\n  -0.44303     -0.42742\n   0.0024542    0.00808481","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"Note: The default solver for WiSER.jl is :","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"Ipopt.IpoptSolver(print_level=0, mehrotra_algorithm = \"yes\", warm_start_init_point=\"yes\", max_iter=100) ","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"This was chosen as it a free, open-source solver and the options typically reduce line search and lead to much faster fitting than other options. However, it can be a bit more instable. Below are tips to help improve estimation if the fit seems very off or fails. Switching the solver options or removing them and assigning it to the base Ipopt Solver Ipopt.IpoptSolver(max_iter=100) can take longer to converge but is usually a bit more stable. ","category":"page"},{"location":"model_fitting/#Tips-for-improving-estimation","page":"Model Fitting","title":"Tips for improving estimation","text":"","category":"section"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"fit! may fail due to various reasons. Often it indicates ill-conditioned data or an inadequate model. Following strategies may improve the fit. ","category":"page"},{"location":"model_fitting/#Standardize-continuous-predictors","page":"Model Fitting","title":"Standardize continuous predictors","text":"","category":"section"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"In above example, we used the standardardized bmi. If we used the original bmi variable, the estimates of τ are instable, reflected by the large standard errors.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"# using unscaled bmi causes ill-conditioning\nvlmm_bmi = WSVarLmmModel(\n    @formula(sbp ~ 1 + agegroup + gender + bmi + meds), \n    @formula(sbp ~ 1 + bmi), \n    @formula(sbp ~ 1 + agegroup + meds + bmi),\n    :id, df);\nWiSER.fit!(vlmm_bmi)","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"run = 1, ‖Δβ‖ = 0.208950, ‖Δτ‖ = 0.445610, ‖ΔL‖ = 2.027674, status = Optimal, time(s) = 0.255484\nrun = 2, ‖Δβ‖ = 0.032012, ‖Δτ‖ = 0.014061, ‖ΔL‖ = 0.780198, status = Optimal, time(s) = 0.411095\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n────────────────────────────────────────────────────────────\n                      Estimate  Std. Error       Z  Pr(>|Z|)\n────────────────────────────────────────────────────────────\nβ1: (Intercept)   100.131        0.319906   313.00    <1e-99\nβ2: agegroup       14.9844       0.0633245  236.63    <1e-99\nβ3: gender: Male   10.0749       0.100279   100.47    <1e-99\nβ4: bmi             0.246808     0.0115793   21.31    <1e-99\nβ5: meds: OnMeds  -10.1107       0.122918   -82.26    <1e-99\nτ1: (Intercept)    -2.63101     17.2804      -0.15    0.8790\nτ2: agegroup        1.50759      5.69286      0.26    0.7911\nτ3: meds: OnMeds   -0.435225     1.37021     -0.32    0.7508\nτ4: bmi             0.00438748   0.0281074    0.16    0.8760\n────────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  0.484542    0.00557087\n \"γ2: bmi\"          0.00557087  0.000380843","category":"page"},{"location":"model_fitting/#Increase-runs","page":"Model Fitting","title":"Increase runs","text":"","category":"section"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"Increasing runs (default is 2) takes more computing resources but can be useful to get more precise estimates. If we set runs=3 when using original bmi (ill-conditioned), the estimated τ are more accurate. The estimate of Σγ is still off though.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"# improve estimates from ill-conditioned data by more runs\nWiSER.fit!(vlmm_bmi, runs=3)","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"run = 1, ‖Δβ‖ = 0.208950, ‖Δτ‖ = 0.445610, ‖ΔL‖ = 2.027674, status = Optimal, time(s) = 0.850399\nrun = 2, ‖Δβ‖ = 0.032012, ‖Δτ‖ = 0.014061, ‖ΔL‖ = 0.780198, status = Optimal, time(s) = 1.060520\nrun = 3, ‖Δβ‖ = 0.008059, ‖Δτ‖ = 0.099534, ‖ΔL‖ = 0.696869, status = Optimal, time(s) = 1.127406\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n─────────────────────────────────────────────────────────────\n                       Estimate  Std. Error       Z  Pr(>|Z|)\n─────────────────────────────────────────────────────────────\nβ1: (Intercept)   100.139         0.315745   317.15    <1e-99\nβ2: agegroup       14.9839        0.0633172  236.65    <1e-99\nβ3: gender: Male   10.0753        0.10027    100.48    <1e-99\nβ4: bmi             0.246528      0.0114083   21.61    <1e-99\nβ5: meds: OnMeds  -10.1109        0.122778   -82.35    <1e-99\nτ1: (Intercept)    -2.53158       0.866855    -2.92    0.0035\nτ2: agegroup        1.50917       0.031734    47.56    <1e-99\nτ3: meds: OnMeds   -0.436745      0.0513571   -8.50    <1e-16\nτ4: bmi             0.000277851   0.0363866    0.01    0.9939\n─────────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  3.48717e-48  7.26846e-26\n \"γ2: bmi\"          7.26846e-26  0.00155716","category":"page"},{"location":"model_fitting/#Try-different-nonlinear-programming-(NLP)-solvers","page":"Model Fitting","title":"Try different nonlinear programming (NLP) solvers","text":"","category":"section"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"A different solver may remedy the issue. By default, WiSER.jl uses the Ipopt solver, but it can use any solver that supports MathProgBase.jl. Check documentation of fit! for commonly used NLP solvers. In our experience, Knitro.jl works the best, but it is a commercial software.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"# watchdog_shortened_iter_trigger option in IPOPT can sometimes be more robust to numerical issues\nWiSER.fit!(vlmm, Ipopt.IpoptSolver(print_level=0, watchdog_shortened_iter_trigger=3, max_iter=100))","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"run = 1, ‖Δβ‖ = 0.037311, ‖Δτ‖ = 0.166678, ‖ΔL‖ = 0.100999, status = Optimal, time(s) = 0.212217\nrun = 2, ‖Δβ‖ = 0.005220, ‖Δτ‖ = 0.006748, ‖ΔL‖ = 0.048735, status = Optimal, time(s) = 0.222246\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n───────────────────────────────────────────────────────────\n                     Estimate  Std. Error       Z  Pr(>|Z|)\n───────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308       0.14384    739.07    <1e-99\nβ2: agegroup       14.9844      0.0633245  236.63    <1e-99\nβ3: gender: Male   10.0749      0.100279   100.47    <1e-99\nβ4: bmi_std         0.296424    0.0139071   21.31    <1e-99\nβ5: meds: OnMeds  -10.1107      0.122918   -82.26    <1e-99\nτ1: (Intercept)    -2.5212      0.393792    -6.40    <1e-9\nτ2: agegroup        1.50759     0.135456    11.13    <1e-28\nτ3: meds: OnMeds   -0.435225    0.0621076   -7.01    <1e-11\nτ4: bmi_std         0.0052695   0.0224039    0.24    0.8140\n───────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00196    0.0181387\n \"γ2: bmi_std\"      0.0181387  0.000549357","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"# print Ipopt iterates for diagnostics\nWiSER.fit!(vlmm, Ipopt.IpoptSolver(print_level=5, mehrotra_algorithm=\"yes\", warm_start_init_point=\"yes\"))","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"This is Ipopt version 3.13.2, running with linear solver mumps.\nNOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n\nNumber of nonzeros in equality constraint Jacobian...:        0\nNumber of nonzeros in inequality constraint Jacobian.:        0\nNumber of nonzeros in Lagrangian Hessian.............:       28\n\nTotal number of variables............................:        7\n                     variables with only lower bounds:        0\n                variables with lower and upper bounds:        0\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:        0\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  2.8331778e+04 0.00e+00 1.00e+02   0.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1  2.8314110e+04 0.00e+00 2.49e+01 -11.0 3.08e-01    -  1.00e+00 1.00e+00f  1\n   2  2.8312135e+04 0.00e+00 3.32e+00 -11.0 2.63e-01    -  1.00e+00 1.00e+00f  1\n   3  2.8311752e+04 0.00e+00 1.36e+00 -11.0 2.08e-01    -  1.00e+00 1.00e+00f  1\n   4  2.8311700e+04 0.00e+00 3.34e-01 -11.0 1.25e-01    -  1.00e+00 1.00e+00f  1\n   5  2.8311697e+04 0.00e+00 2.79e-02 -11.0 3.98e-02    -  1.00e+00 1.00e+00f  1\n   6  2.8311697e+04 0.00e+00 2.40e-04 -11.0 3.48e-03    -  1.00e+00 1.00e+00f  1\n   7  2.8311697e+04 0.00e+00 5.47e-06 -11.0 2.47e-05    -  1.00e+00 1.00e+00f  1\n   8  2.8311697e+04 0.00e+00 9.63e-08 -11.0 1.20e-08    -  1.00e+00 1.00e+00f  1\n   9  2.8311697e+04 0.00e+00 5.21e-09 -11.0 1.61e-10    -  1.00e+00 1.00e+00f  1\n\nNumber of Iterations....: 9\n\n                                   (scaled)                 (unscaled)\nObjective...............:   1.6226171160601309e+04    2.8311697021847416e+04\nDual infeasibility......:   5.2065403612135009e-09    9.0844594069494633e-09\nConstraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00\nOverall NLP error.......:   5.2065403612135009e-09    9.0844594069494633e-09\n\n\nNumber of objective function evaluations             = 10\nNumber of objective gradient evaluations             = 10\nNumber of equality constraint evaluations            = 0\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 0\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 9\nTotal CPU secs in IPOPT (w/o function evaluations)   =      0.013\nTotal CPU secs in NLP function evaluations           =      0.182\n\nEXIT: Optimal Solution Found.\nrun = 1, ‖Δβ‖ = 0.037311, ‖Δτ‖ = 0.166678, ‖ΔL‖ = 0.100999, status = Optimal, time(s) = 0.201498\nThis is Ipopt version 3.13.2, running with linear solver mumps.\nNOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n\nNumber of nonzeros in equality constraint Jacobian...:        0\nNumber of nonzeros in inequality constraint Jacobian.:        0\nNumber of nonzeros in Lagrangian Hessian.............:       28\n\nTotal number of variables............................:        7\n                     variables with only lower bounds:        0\n                variables with lower and upper bounds:        0\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:        0\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  2.7170793e+04 0.00e+00 1.52e+01   0.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1  2.7170194e+04 0.00e+00 3.80e+00 -11.0 3.15e-01    -  1.00e+00 1.00e+00f  1\n   2  2.7170055e+04 0.00e+00 1.91e+00 -11.0 3.07e-01    -  1.00e+00 1.00e+00f  1\n   3  2.7170020e+04 0.00e+00 9.10e-01 -11.0 2.86e-01    -  1.00e+00 1.00e+00f  1\n   4  2.7170013e+04 0.00e+00 3.93e-01 -11.0 2.47e-01    -  1.00e+00 1.00e+00f  1\n   5  2.7170011e+04 0.00e+00 1.35e-01 -11.0 1.82e-01    -  1.00e+00 1.00e+00f  1\n   6  2.7170011e+04 0.00e+00 2.58e-02 -11.0 9.30e-02    -  1.00e+00 1.00e+00f  1\n   7  2.7170011e+04 0.00e+00 1.16e-03 -11.0 2.12e-02    -  1.00e+00 1.00e+00f  1\n   8  2.7170011e+04 0.00e+00 9.88e-06 -11.0 9.61e-04    -  1.00e+00 1.00e+00f  1\n   9  2.7170011e+04 0.00e+00 2.64e-07 -11.0 2.10e-06    -  1.00e+00 1.00e+00f  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  10  2.7170011e+04 0.00e+00 4.68e-09 -11.0 6.64e-09    -  1.00e+00 1.00e+00f  1\n\nNumber of Iterations....: 10\n\n                                   (scaled)                 (unscaled)\nObjective...............:   2.7170011141755807e+04    2.7170011141755807e+04\nDual infeasibility......:   4.6825319177656866e-09    4.6825319177656866e-09\nConstraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00\nOverall NLP error.......:   4.6825319177656866e-09    4.6825319177656866e-09\n\n\nNumber of objective function evaluations             = 11\nNumber of objective gradient evaluations             = 11\nNumber of equality constraint evaluations            = 0\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 0\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 10\nTotal CPU secs in IPOPT (w/o function evaluations)   =      0.014\nTotal CPU secs in NLP function evaluations           =      0.201\n\nEXIT: Optimal Solution Found.\nrun = 2, ‖Δβ‖ = 0.005220, ‖Δτ‖ = 0.006748, ‖ΔL‖ = 0.048735, status = Optimal, time(s) = 0.220485\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n───────────────────────────────────────────────────────────\n                     Estimate  Std. Error       Z  Pr(>|Z|)\n───────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308       0.14384    739.07    <1e-99\nβ2: agegroup       14.9844      0.0633245  236.63    <1e-99\nβ3: gender: Male   10.0749      0.100279   100.47    <1e-99\nβ4: bmi_std         0.296424    0.0139071   21.31    <1e-99\nβ5: meds: OnMeds  -10.1107      0.122918   -82.26    <1e-99\nτ1: (Intercept)    -2.5212      0.393792    -6.40    <1e-9\nτ2: agegroup        1.50759     0.135456    11.13    <1e-28\nτ3: meds: OnMeds   -0.435225    0.0621076   -7.01    <1e-11\nτ4: bmi_std         0.0052695   0.0224039    0.24    0.8140\n───────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00196    0.0181387\n \"γ2: bmi_std\"      0.0181387  0.000549357","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"# use Knitro (require installation of Knitro software and Knitro.jl)\n# Using KNITRO\n# WiSER.fit!(vlmm, KNITRO.KnitroSolver(outlev=3));","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"# use NLopt\nWiSER.fit!(vlmm, NLopt.NLoptSolver(algorithm=:LD_MMA, maxeval=4000))","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"run = 1, ‖Δβ‖ = 0.037311, ‖Δτ‖ = 0.162196, ‖ΔL‖ = 0.100050, status = Optimal, time(s) = 0.571036\nrun = 2, ‖Δβ‖ = 0.005248, ‖Δτ‖ = 0.008742, ‖ΔL‖ = 0.001334, status = Optimal, time(s) = 0.185684\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n────────────────────────────────────────────────────────────\n                      Estimate  Std. Error       Z  Pr(>|Z|)\n────────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308        0.14384    739.07    <1e-99\nβ2: agegroup       14.9844       0.0633238  236.63    <1e-99\nβ3: gender: Male   10.0749       0.100277   100.47    <1e-99\nβ4: bmi_std         0.296421     0.0139114   21.31    <1e-99\nβ5: meds: OnMeds  -10.1106       0.122912   -82.26    <1e-99\nτ1: (Intercept)    -2.53263      0.102706   -24.66    <1e-99\nτ2: agegroup        1.51161      0.0388869   38.87    <1e-99\nτ3: meds: OnMeds   -0.435897     0.0524849   -8.31    <1e-16\nτ4: bmi_std         0.00576945   0.0218517    0.26    0.7918\n────────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00228    0.0179118\n \"γ2: bmi_std\"      0.0179118  0.00441753","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"Using a different solver can even help without the need for standardizing predictors. If we use the NLOPT solver with the LD_MMA algorithm on the model where bmi is not standardized we don't see heavily inflated standard errors.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"# Using other solvers can work without standardizing \nWiSER.fit!(vlmm_bmi, NLopt.NLoptSolver(algorithm=:LD_MMA, maxeval=4000))","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"run = 1, ‖Δβ‖ = 0.208950, ‖Δτ‖ = 0.139300, ‖ΔL‖ = 1.629470, status = Optimal, time(s) = 1.877337\nrun = 2, ‖Δβ‖ = 0.028303, ‖Δτ‖ = 0.000130, ‖ΔL‖ = 0.000415, status = Optimal, time(s) = 0.188945\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n───────────────────────────────────────────────────────────\n                     Estimate  Std. Error       Z  Pr(>|Z|)\n───────────────────────────────────────────────────────────\nβ1: (Intercept)   100.127       0.322948   310.04    <1e-99\nβ2: agegroup       14.9849      0.0633315  236.61    <1e-99\nβ3: gender: Male   10.0749      0.100294   100.45    <1e-99\nβ4: bmi             0.24691     0.0116922   21.12    <1e-98\nβ5: meds: OnMeds  -10.1094      0.123008   -82.19    <1e-99\nτ1: (Intercept)    -3.02804     0.861523    -3.51    0.0004\nτ2: agegroup        1.51038     0.0624133   24.20    <1e-99\nτ3: meds: OnMeds   -0.42692     0.0525523   -8.12    <1e-15\nτ4: bmi             0.0197105   0.0408088    0.48    0.6291\n───────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"   3.50514   -0.111303\n \"γ2: bmi\"          -0.111303   0.00490597","category":"page"},{"location":"model_fitting/#Try-different-starting-points","page":"Model Fitting","title":"Try different starting points","text":"","category":"section"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"Initialization matters as well. By default, fit! uses a crude least squares estimate as the starting point. We can also try a method of moment estimate or user-supplied values.","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"# MoM starting point\nWiSER.fit!(vlmm, init = init_mom!(vlmm))","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"run = 1, ‖Δβ‖ = 0.036245, ‖Δτ‖ = 0.188207, ‖ΔL‖ = 0.127483, status = Optimal, time(s) = 0.256069\nrun = 2, ‖Δβ‖ = 0.006798, ‖Δτ‖ = 0.009128, ‖ΔL‖ = 0.050049, status = Optimal, time(s) = 0.340028\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n────────────────────────────────────────────────────────────\n                      Estimate  Std. Error       Z  Pr(>|Z|)\n────────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308        0.143831   739.12    <1e-99\nβ2: agegroup       14.9846       0.063327   236.62    <1e-99\nβ3: gender: Male   10.0747       0.100282   100.46    <1e-99\nβ4: bmi_std         0.296596     0.013989    21.20    <1e-99\nβ5: meds: OnMeds  -10.1107       0.122973   -82.22    <1e-99\nτ1: (Intercept)    -2.52233      0.218068   -11.57    <1e-30\nτ2: agegroup        1.5079       0.0759423   19.86    <1e-87\nτ3: meds: OnMeds   -0.434951     0.0549139   -7.92    <1e-14\nτ4: bmi_std         0.00527178   0.0220323    0.24    0.8109\n────────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00193    0.0180064\n \"γ2: bmi_std\"      0.0180064  0.000967577","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"# user-supplied starting point in vlmm.β, vlmm.τ, vlmm.Lγ\nvlmm.β .= [106.0; 15.0; 10.0; 0.3; -10.0]\nvlmm.τ .= [-2.5; 1.5; -0.5; 0.0]\nvlmm.Lγ .= [1.0 0.0; 0.0 0.0]\n\nfit!(vlmm, init = vlmm)","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"run = 1, ‖Δβ‖ = 0.337743, ‖Δτ‖ = 0.069850, ‖ΔL‖ = 0.017323, status = Optimal, time(s) = 0.196880\nrun = 2, ‖Δβ‖ = 0.003050, ‖Δτ‖ = 0.004463, ‖ΔL‖ = 0.001185, status = Optimal, time(s) = 0.222161\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n────────────────────────────────────────────────────────────\n                      Estimate  Std. Error       Z  Pr(>|Z|)\n────────────────────────────────────────────────────────────\nβ1: (Intercept)   106.309        0.143859   738.98    <1e-99\nβ2: agegroup       14.984        0.0633192  236.64    <1e-99\nβ3: gender: Male   10.0754       0.100275   100.48    <1e-99\nβ4: bmi_std         0.296078     0.0136905   21.63    <1e-99\nβ5: meds: OnMeds  -10.1108       0.122807   -82.33    <1e-99\nτ1: (Intercept)    -2.52144      0.0576657  -43.73    <1e-99\nτ2: agegroup        1.50787      0.0253351   59.52    <1e-99\nτ3: meds: OnMeds   -0.436135     0.0512042   -8.52    <1e-16\nτ4: bmi_std         0.00525556   0.0214765    0.24    0.8067\n────────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00203    0.0184422\n \"γ2: bmi_std\"      0.0184422  0.000339423","category":"page"},{"location":"model_fitting/","page":"Model Fitting","title":"Model Fitting","text":"","category":"page"},{"location":"simulation/#Simulating-responses","page":"Simulating responses","title":"Simulating responses","text":"","category":"section"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"The rvarlmm() and rvarlmm!() functions can be used to generate a respone from user-supplied data and parameters. The rand!() command can be used to overwrite the response in a VarLmmModel object based on the parameters and optional user-supplied distribution.   ","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"The rand!(m::WSVarLmmModel; respdist = MvNormal, γωdist = MvNormal, Σγω = [], kwargs...) function replaces the responses m.data[i].y with a simulated response based on:","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"The data in the model object's data X, Z, W matrices. \nThe parameter values in the model.\nThe condistribution distribution of the response given the random effects.\nThe distribution of the random effects.\nIf simulating from MvTDistribution, you must specify the degrees of freedom via df = x.","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"The rvarlmm() takes arrays of matricies of the data in addition to the reponse. It generates a simulated response from the VarLMM model based on:","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"Xs: array of each clusters X: mean fixed effects covariates\nZs: array of each clusters Z: random location effects covariates\nWs: array of each clusters W: within-subject variance fixed effects covariates\nβ: mean fixed effects vector\nτ: within-subject variance fixed effects vector\nrespdist: the distribution for response. Default is MvNormal. \nΣγ: random location effects covariance matrix. \nΣγω: joint random location and random scale effects covariance matrix (if generating from full model).\nIf simulating from MvTDistribution, you must specify the degrees of freedom via df = x.","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"The rvarlmm!() function can be used to generate a simulated response from the VarLMM model based on a dataframe and place the generated response into the datatable with the respname field. ","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"Note: the dataframe MUST be ordered by grouping variable for it to generate in the correct order. This can be checked via dataframe == sort(dataframe, idvar). The response is based on:","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"meanformula: represents the formula for the mean fixed effects β (variables in X matrix)\nreformula: represents the formula for the mean random effects γ (variables in Z matrix)\nwsvarformula: represents the formula for the within-subject variance fixed effects τ (variables in W matrix)\nidvar: the id variable for groupings.\ndataframe: the dataframe holding all of the data for the model. For this function it must be in order.\nβ: mean fixed effects vector\nτ: within-subject variance fixed effects vector\nrespdist: the distribution for response. Default is MvNormal. \nΣγ: random location effects covariance matrix. \nΣγω: joint random location and random scale effects covariance matrix (if generating from full model)\nrespname: symbol representing the simulated response variable name.\nIf simulating from MvTDistribution, you must specify the degrees of freedom via df = x.","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"For both functions, only one of the Σγ or Σγω matrices have to be specified in order to use the function. Σγ can be used to specify that the generative model will not include a random scale component. It outputs ys: an array of reponse y that match the order of the data arrays (Xs, Zs, Ws).","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"We can start by loading the pacakges, data, and fitting a model.","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"using CSV, DataFrames, Random, WiSER\nfilepath = normpath(joinpath(dirname(pathof(WiSER)), \"../data/\"))\ndf = DataFrame!(CSV.File(filepath * \"sbp.csv\"))\nvlmm = WSVarLmmModel(\n    @formula(sbp ~ 1 + agegroup + gender + bmi_std + meds), \n    @formula(sbp ~ 1 + bmi_std), \n    @formula(sbp ~ 1 + agegroup + meds + bmi_std),\n    :id, df);\nWiSER.fit!(vlmm)","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"******************************************************************************\nThis program contains Ipopt, a library for large-scale nonlinear optimization.\n Ipopt is released as open source code under the Eclipse Public License (EPL).\n         For more information visit http://projects.coin-or.org/Ipopt\n******************************************************************************\n\nrun = 1, ‖Δβ‖ = 0.037311, ‖Δτ‖ = 0.166678, ‖ΔL‖ = 0.100999, status = Optimal, time(s) = 0.376659\nrun = 2, ‖Δβ‖ = 0.005220, ‖Δτ‖ = 0.006748, ‖ΔL‖ = 0.048735, status = Optimal, time(s) = 0.234782\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n───────────────────────────────────────────────────────────\n                     Estimate  Std. Error       Z  Pr(>|Z|)\n───────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308       0.14384    739.07    <1e-99\nβ2: agegroup       14.9844      0.0633245  236.63    <1e-99\nβ3: gender: Male   10.0749      0.100279   100.47    <1e-99\nβ4: bmi_std         0.296424    0.0139071   21.31    <1e-99\nβ5: meds: OnMeds  -10.1107      0.122918   -82.26    <1e-99\nτ1: (Intercept)    -2.5212      0.393792    -6.40    <1e-9\nτ2: agegroup        1.50759     0.135456    11.13    <1e-28\nτ3: meds: OnMeds   -0.435225    0.0621076   -7.01    <1e-11\nτ4: bmi_std         0.0052695   0.0224039    0.24    0.8140\n───────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00196    0.0181387\n \"γ2: bmi_std\"      0.0181387  0.000549357","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"Once the model has been fit, we can overwrite the response variable simulating a new response based on the model's current parameters. This is done by calling the rand!() function on the model object. Here we simulate from a multivariate normal dsitribution for y.","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"yoriginal = copy(vlmm.data[1].y)\nRandom.seed!(123)\nWiSER.rand!(vlmm; respdist = MvNormal) \n[yoriginal vlmm.data[1].y]","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"9×2 Array{Float64,2}:\n 159.586  163.223\n 161.849  161.898\n 160.484  160.667\n 161.134  165.167\n 165.443  162.258\n 160.053  163.019\n 162.1    162.065\n 163.153  161.422\n 166.675  160.552","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"Other response distributions have been coded. To get a list of available distributions use respdists()","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"respdists()","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"6-element Array{Symbol,1}:\n :MvNormal\n :MvTDist\n :Gamma\n :InverseGaussian\n :InverseGamma\n :Uniform","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"WiSER.rand!(vlmm; respdist = InverseGamma) \nvlmm.data[1].y","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"9-element Array{Float64,1}:\n 167.83510676083995\n 161.04081244800372\n 161.88509094798928\n 162.76369002769596\n 168.02717792311043\n 164.52117964053977\n 162.84533339184907\n 162.54354236314282\n 163.87154251671376","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"We can also simulate a response variable from a dataframe and a formula. ","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"If you don't want to overwrite the response variable in the dataframe, you can use the respname optional keyword argument to specify the desired variable name to save the response variable as. ","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"df = DataFrame(id = [1; 1; 2; 3; 3; 3; 4], y = randn(7),\nx2 = randn(7), x3 = randn(7), z2 = randn(7), w2 = randn(7), w3 = randn(7))\n\nf1 = @formula(y ~ 1 + x2 + x3)\nf2 = @formula(y ~ 1 + z2)\nf3 = @formula(y ~ 1 + w2 + w3)\n\nβ = zeros(3)\nτ = zeros(3)\nΣγ = [1. 0.; 0. 1.]\nrvarlmm!(f1, f2, f3, :id, df, β, τ;\n        Σγ = Σγ, respname = :response)\n[df[!, :y] df[!, :response]]","category":"page"},{"location":"simulation/","page":"Simulating responses","title":"Simulating responses","text":"7×2 Array{Float64,2}:\n  1.54783   -1.13623\n  0.365508  -2.03964\n -0.31447   -3.0298\n -0.291651   0.79679\n  1.0763     1.12252\n -0.672566   1.25175\n -0.70343    0.34088","category":"page"},{"location":"#WiSER.jl-Introduction","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"","category":"section"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"WiSER.jl implements a regression method for modeling the within-subject variability of a longitudinal measurement. It stands for within-subject variance estimation by robust regression. ","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"This package requires Julia v1.0 or later, which can be obtained from https://julialang.org/downloads/ or by building Julia from the sources in the https://github.com/JuliaLang/julia repository.","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"The package has not yet been registered and must be installed using the repository location. Start Julia and use the ] key to switch to the package manager REPL","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"(@v1.5) Pkg> add https://github.com/OpenMendel/WiSER.jl","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"Use the backspace key to return to the Julia REPL.","category":"page"},{"location":"#Model","page":"WiSER.jl Introduction","title":"Model","text":"","category":"section"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"WiSER was created to efficiently estimate effects of covarariates on within-subject (WS) variability in logitudinal data. The following graphic depicts the motiviation for WiSER and what it can model.","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"<img src=\"notebooks/wisermotivation.png\" width=\"750\">","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"The figure above displays systolic blood pressure (SBP) measured for two patients followed up over 40-visits. At baseline, we see a difference in both mean and variability of SBP between the two patients. After the 20th visit, patient 1 goes on blood pressure medication and their mean and WS variance of SBP more similarly match patient 2's. It can be of clinical importance to model what factors associated with these baseline differences in mean and WS variance as well as how being on medication (a time-varying covariate) affects these measures. WiSER is able to simultaneously model (time-invariant and time-varying) covariates' effects on mean and within-subject variability of longitudinal traits. ","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"The mean fixed effects are estimated in boldsymbolbeta, the within-subject variance fixed effects are estimated by boldsymboltau, and the random effects covariance matrix is estimated in boldsymbolSigma_boldsymbolgamma.","category":"page"},{"location":"#Model-Details","page":"WiSER.jl Introduction","title":"Model Details","text":"","category":"section"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"In addition to mean levels, it can be important to model factors influencing within-subject variability of longitudinal outcomes. We utilize a modified linear mixed effects model that allows for within-subject variability to be modeled as through covariates. It is based on the Mixed Effects Multiple Location Scale Model introduced by Dzubar et al. (2020). ","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"The procedure assumes the following model for the data:","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"Data:","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"textbfy_ij\nlongitudinal response of subject i at time j\ntextbfx_ij\nmean fixed effects covariates of subject i at time j\ntextbfz_ij\nrandom (location) effects covariates of subject i at time j\ntextbfw_ij\nwithin-subject variance fixed effects covariates of subject i at time j","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"Parameters:","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"boldsymbolbeta\nmean fixed effects\nboldsymboltau\nwithin-subject variance fixed effects\nboldsymbolboldsymbolgamma_i\nrandom location effects of subject i\nboldsymbolSigma_boldsymbolgamma\nrandom (location) effects covariance matrix\nomega_i\nrandom scale effect of subject i\nsigma_omega^2\nvariance of random scale effect\nboldsymbolSigma_boldsymbolgamma omega\njoint random effects covariance matrix","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"Other:","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"mathcalD(a b)\nunspecified distribution with mean a and variance b\nepsilon_ij\nerror term of subject i and time j capturing within-subject variability","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"The longitduinal data are modeled via:","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"\\begin{eqnarray} y{ij} &=& \\textbf{x}{ij}^T\\boldsymbol{\\beta} + \\textbf{z}{ij}^T\\boldsymbol{\\gamma}i + \\epsilon{ij}, \\\n\\epsilon{ij} &\\sim& \\mathcal{D}(0, \\sigma{\\epsilon{ij}}^2), \\\n\\boldsymbol{\\gammai} &=& (\\gamma{i1}, \\gamma{i2}, \\cdots, \\gamma{iq})^T \\sim \\mathcal{D}(\\mathbf{0}{q}, \\boldsymbol{\\Sigma}{\\boldsymbol{\\gamma}}), \\end{eqnarray}","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"where","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"\\begin{eqnarray} \\sigma{\\epsilon{ij}}^2 = \\exp (\\textbf{w}{ij}^T \\boldsymbol{\\tau} + \\boldsymbol{\\ell}{\\boldsymbol{\\gamma} \\omega}^T \\boldsymbol{\\gammai} + \\omegai)  \\text{,   }\\omegai \\sim \\mathcal{D}(0, \\sigma\\omega^2) \\end{eqnarray}","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"represents the within-subject variance with boldsymbolell_gamma omega^T coming from the Cholesky factor of the covariance matrix of the joint distribution of random effects (boldsymbolgamma_i, omega_i).  The joint distribution","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"\\begin{eqnarray} \\begin{pmatrix} \\boldsymbol{\\gammai} \\ \\omegai \\end{pmatrix} \\sim \\mathcal{D}(\\mathbf{0}{q+1}, \\boldsymbol{\\Sigma}{\\boldsymbol{\\gamma} \\omega}) \\end{eqnarray}","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"and denote the Cholesky decomposition of the covariance matrix boldsymbolSigma_gamma w as","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"\\begin{eqnarray} \\boldsymbol{\\Sigma}{\\boldsymbol{\\gamma} \\omega} &=& \\begin{pmatrix} \\boldsymbol{\\Sigma}{\\boldsymbol{\\gamma}} & \\boldsymbol{\\sigma}{\\boldsymbol{\\gamma} \\omega} \\\n\\boldsymbol{\\sigma}{\\boldsymbol{\\gamma} \\omega}^T & \\sigma\\omega^2 \\end{pmatrix} = \\textbf{L} \\textbf{L}^T, \\quad \\textbf{L} = \\begin{pmatrix} \\textbf{L}{\\boldsymbol{\\gamma}} & \\mathbf{0} \\\n\\boldsymbol{\\ell}{\\boldsymbol{\\gamma} \\omega}^T & \\ell{\\omega} \\end{pmatrix}, \\end{eqnarray}","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"where textbfL_boldsymbolgamma is a q times q upper triangular matrix with positive diagonal entries and ell_omega  0. The elements of boldsymbolSigma_boldsymbolgamma omega can be expressed in terms of the Cholesky factors as:","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"\\begin{eqnarray} \\boldsymbol{\\Sigma}{\\boldsymbol{\\gamma}} &=& \\textbf{L}{\\boldsymbol{\\gamma}} \\textbf{L}{\\boldsymbol{\\gamma}}^T \\  \\boldsymbol{\\sigma}{\\boldsymbol{\\gamma} \\omega} &=& \\textbf{L}{\\boldsymbol{\\gamma}} \\boldsymbol{\\ell}{\\boldsymbol{\\gamma} \\omega} \\\n\\sigma\\omega^2 &=& \\boldsymbol{\\ell}{\\boldsymbol{\\gamma} \\omega}^T \\boldsymbol{\\ell}{\\boldsymbol{\\gamma} \\omega} + \\ell{\\omega}^2  \\end{eqnarray}","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"In Dzubuar et al's estimation, they assume all unspecified distributions above are Normal distributions. Our estimation procedure is robust and only needs that the mean and variance of those random variables hold. In their MixWILD software, they fit the model through maximum likelihood, requiring numerically intensive numerical integration. ","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"We have derived a computationally efficient and statistically robust method for obtaining estimates of boldsymbolbeta boldsymboltau textand boldsymbolSigma_gamma. The mean fixed effects, boldsymbolbeta are estimates via weighted least squares, while the variance components boldsymboltau and boldsymbolSigma_gamma are estimated via a weighted nonlinear least squares approach motivated by the method of moments estimation. We do not estimate any parameters associated with the random scale effect omega_i or any association between boldsymbolgamma_i and omega_i. These are treated as nuissance parameters that get absorbed into the estimation of the intercept of boldsymboltau.","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"NOTE: When the true data has a random scale effect with non-zero variance sigma^2_omega, WiSER's estimates of boldsymbolbeta, non-intercept values of  boldsymboltau, and, boldsymbolSigma_gamma are consistent. In this case, the intercept of boldsymboltau absorbs effects from sigma^2_omega. ","category":"page"},{"location":"","page":"WiSER.jl Introduction","title":"WiSER.jl Introduction","text":"","category":"page"}]
}
