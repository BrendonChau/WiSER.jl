var documenterSearchIndex = {"docs":
[{"location":"#WiSER.jl","page":"WiSER.jl","title":"WiSER.jl","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"WiSER.jl implements a regression method for modeling the within-subject variability of a longitudinal measurement. It stands for within-subject variance estimation by robust regression. ","category":"page"},{"location":"#Model","page":"WiSER.jl","title":"Model","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"TODO: don't need to give this much details. Make it clear what kind of problems it solves (a diagram will be perfect) and cite preprint will be enough.","category":"page"},{"location":"#Installation","page":"WiSER.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"This package requires Julia v1.0 or later, which can be obtained from https://julialang.org/downloads/ or by building Julia from the sources in the https://github.com/JuliaLang/julia repository.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The package has not yet been registered and must be installed using the repository location. Start Julia and use the ] key to switch to the package manager REPL","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"(@v1.4) Pkg> add https://github.com/OpenMendel/WiSER.jl","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"Use the backspace key to return to the Julia REPL.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"# for this tutorial\nusing CSV, JuliaDB, Random, WiSER","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"┌ Info: Precompiling WiSER [2ff19380-1883-49fc-9d10-450face6b90c]\n└ @ Base loading.jl:1260","category":"page"},{"location":"#Example-data","page":"WiSER.jl","title":"Example data","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The example dataset, sbp.csv, is contained in data folder of the package. It is a simulated datatset with 500 individuals, each having 9~11 observations. The outcome, systolic blood pressure (SBP), is a function of other covariates. Below we read in the data as a DataFrame using the CSV package. WiSER.jl can take other data table objects, such as IndexedTables from the JuliaDB package.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"filepath = normpath(joinpath(dirname(pathof(WiSER)), \"../data/\"))\ndf = CSV.read(filepath * \"sbp.csv\")","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"┌ Warning: `CSV.read(input; kw...)` is deprecated in favor of `DataFrame!(CSV.File(input; kw...))`\n└ @ CSV /Users/huazhou/.julia/packages/CSV/OM6FO/src/CSV.jl:40","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"<table class=\"data-frame\"><thead><tr><th></th><th>id</th><th>sbp</th><th>agegroup</th><th>gender</th><th>bmi</th><th>meds</th><th>bmi_std</th></tr><tr><th></th><th>Int64</th><th>Float64</th><th>Float64</th><th>String</th><th>Float64</th><th>String</th><th>Float64</th></tr></thead><tbody><p>5,011 rows × 7 columns</p><tr><th>1</th><td>1</td><td>159.586</td><td>3.0</td><td>Male</td><td>23.1336</td><td>NoMeds</td><td>-1.57733</td></tr><tr><th>2</th><td>1</td><td>161.849</td><td>3.0</td><td>Male</td><td>26.5885</td><td>NoMeds</td><td>1.29927</td></tr><tr><th>3</th><td>1</td><td>160.484</td><td>3.0</td><td>Male</td><td>24.8428</td><td>NoMeds</td><td>-0.154204</td></tr><tr><th>4</th><td>1</td><td>161.134</td><td>3.0</td><td>Male</td><td>24.9289</td><td>NoMeds</td><td>-0.0825105</td></tr><tr><th>5</th><td>1</td><td>165.443</td><td>3.0</td><td>Male</td><td>24.8057</td><td>NoMeds</td><td>-0.185105</td></tr><tr><th>6</th><td>1</td><td>160.053</td><td>3.0</td><td>Male</td><td>24.1583</td><td>NoMeds</td><td>-0.72415</td></tr><tr><th>7</th><td>1</td><td>162.1</td><td>3.0</td><td>Male</td><td>25.2543</td><td>NoMeds</td><td>0.188379</td></tr><tr><th>8</th><td>1</td><td>163.153</td><td>3.0</td><td>Male</td><td>24.3951</td><td>NoMeds</td><td>-0.527037</td></tr><tr><th>9</th><td>1</td><td>166.675</td><td>3.0</td><td>Male</td><td>26.1514</td><td>NoMeds</td><td>0.935336</td></tr><tr><th>10</th><td>2</td><td>130.765</td><td>1.0</td><td>Male</td><td>22.6263</td><td>NoMeds</td><td>-1.99977</td></tr><tr><th>11</th><td>2</td><td>131.044</td><td>1.0</td><td>Male</td><td>24.7404</td><td>NoMeds</td><td>-0.239477</td></tr><tr><th>12</th><td>2</td><td>131.22</td><td>1.0</td><td>Male</td><td>25.3415</td><td>NoMeds</td><td>0.260949</td></tr><tr><th>13</th><td>2</td><td>131.96</td><td>1.0</td><td>Male</td><td>25.6933</td><td>NoMeds</td><td>0.553886</td></tr><tr><th>14</th><td>2</td><td>130.09</td><td>1.0</td><td>Male</td><td>21.7646</td><td>NoMeds</td><td>-2.71724</td></tr><tr><th>15</th><td>2</td><td>130.556</td><td>1.0</td><td>Male</td><td>23.7895</td><td>NoMeds</td><td>-1.03123</td></tr><tr><th>16</th><td>2</td><td>132.001</td><td>1.0</td><td>Male</td><td>26.9103</td><td>NoMeds</td><td>1.56716</td></tr><tr><th>17</th><td>2</td><td>131.879</td><td>1.0</td><td>Male</td><td>24.1153</td><td>NoMeds</td><td>-0.759929</td></tr><tr><th>18</th><td>2</td><td>131.609</td><td>1.0</td><td>Male</td><td>25.3372</td><td>NoMeds</td><td>0.257432</td></tr><tr><th>19</th><td>2</td><td>132.149</td><td>1.0</td><td>Male</td><td>23.7171</td><td>NoMeds</td><td>-1.09154</td></tr><tr><th>20</th><td>2</td><td>130.653</td><td>1.0</td><td>Male</td><td>25.5947</td><td>NoMeds</td><td>0.471793</td></tr><tr><th>21</th><td>3</td><td>145.655</td><td>2.0</td><td>Male</td><td>25.3645</td><td>NoMeds</td><td>0.280102</td></tr><tr><th>22</th><td>3</td><td>147.384</td><td>2.0</td><td>Male</td><td>26.6756</td><td>NoMeds</td><td>1.37179</td></tr><tr><th>23</th><td>3</td><td>146.558</td><td>2.0</td><td>Male</td><td>25.6001</td><td>NoMeds</td><td>0.476309</td></tr><tr><th>24</th><td>3</td><td>146.731</td><td>2.0</td><td>Male</td><td>26.3532</td><td>NoMeds</td><td>1.10337</td></tr><tr><th>25</th><td>3</td><td>143.037</td><td>2.0</td><td>Male</td><td>24.4092</td><td>NoMeds</td><td>-0.515285</td></tr><tr><th>26</th><td>3</td><td>144.845</td><td>2.0</td><td>Male</td><td>25.1193</td><td>NoMeds</td><td>0.075975</td></tr><tr><th>27</th><td>3</td><td>145.366</td><td>2.0</td><td>Male</td><td>25.5029</td><td>NoMeds</td><td>0.395354</td></tr><tr><th>28</th><td>3</td><td>145.506</td><td>2.0</td><td>Male</td><td>25.9668</td><td>NoMeds</td><td>0.781658</td></tr><tr><th>29</th><td>3</td><td>143.155</td><td>2.0</td><td>Male</td><td>24.9327</td><td>NoMeds</td><td>-0.0793522</td></tr><tr><th>30</th><td>3</td><td>146.147</td><td>2.0</td><td>Male</td><td>25.0029</td><td>NoMeds</td><td>-0.020953</td></tr><tr><th>&vellip;</th><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td></tr></tbody></table>","category":"page"},{"location":"#Formulate-model","page":"WiSER.jl","title":"Formulate model","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"First we will create a WSVarLmmModel object from the dataframe.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The WSVarLmmModel() function takes the following arguments: ","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"meanformula: the formula for the mean fixed effects β (variables in X matrix).\nreformula: the formula for the mean random effects γ (variables in Z matrix).\nwsvarformula: the formula  for the within-subject variance fixed effects τ (variables in W matrix). \nidvar: the id variable for groupings. \ndatatable: the datatable holding all of the data for the model. Can be a DataFrame or various types of tables such as an IndexedTable.\nwtvar: Optional argument of variable name holding subject-level weights in the datatable.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"For documentation of the WSVarLmmModel function, type ?WSVarLmmModel in Julia REPL.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"WSVarLmmModel","category":"page"},{"location":"#WiSER.WSVarLmmModel","page":"WiSER.jl","title":"WiSER.WSVarLmmModel","text":"WSVarLmmModel\n\nWithin-subject variance linear mixed model, which contains a vector of  WSVarLmmObs as data, model parameters, and working arrays.\n\nTODO: function documentation\n\n\n\n\n\n","category":"type"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"We will model sbp as a function of age, gender, and bmistd. `bmistdis the centered and scaledbmi`. The following commands fit the following model:","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"textsbp_ij = beta_0 + beta_1 textagegroup_ij + beta_2 textgender_ij + beta_3 textbmi_ij + gamma_i0 + gamma_i1textbmi + epsilon_ij","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"epsilon_ij","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"is distributed with mean 0 variance sigma^2_epsilon_ij","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"gamma_i = (gamma_i0 gamma_i1)","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"has mean 0 and variance Sigma_gamma","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"sigma^2_epsilon_ij = exp(tau_0 + tau_1 textagegroup_ij + tau_2 textgender_ij + tau_3 textbmi_ij)","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"vlmm = WSVarLmmModel(\n    @formula(sbp ~ 1 + agegroup + gender + bmi_std + meds), \n    @formula(sbp ~ 1 + bmi_std), \n    @formula(sbp ~ 1 + agegroup + meds + bmi_std),\n    :id, df);","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The vlmm object has the appropriate data. We can use the fit!() function to fit the model.","category":"page"},{"location":"#Fit-model","page":"WiSER.jl","title":"Fit model","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"Main arguments of the fit!() function are:","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"m::WSVarLmmModel: The model to fit.\nsolver: Non-linear programming solver to be used.\nruns::Integer: Number of weighted nonlinear least squares runs. Default is 2.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"For a complete documentation, type ?WSVarLmmModel in Julia REPL.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"fit!","category":"page"},{"location":"#WiSER.fit!","page":"WiSER.jl","title":"WiSER.fit!","text":"fit!(m::WSVarLmmModel, \nsolver=IpoptSolver(print_level=0, mehrotra_algorithm=\"yes\", max_iter=100);\ninit=init_ls!(m), runs = 2)\n\nFit a WSVarLMMModel object using a weighted NLS method.\n\nPositional arguments\n\nm::WSVarLmmModel: Model to fit.\nsolver: Nonlinear programming solver to use. Common choices include:  \nIpopt.IpoptSolver(print_level=0, mehrotra_algorithm=\"yes\", max_iter=100).\nIpopt.IpoptSolver(print_level=0, watchdog_shortened_iter_trigger=3, max_iter=100).\nKNITRO.KnitroSolver(outlev=3). (Knitro is commercial software)\nNLopt.NLoptSolver(algorithm=:LD_MMA, maxeval=4000).  \nNLopt.NLoptSolver(algorithm=:LD_LBFGS, maxeval=4000).\n\nKeyword arguments\n\ninit: Initialization strategy. fit! will use m.τ and m.Lγ to set the    weight matrices Vi and solve the weighted NLS to obtain an   estimate for m.β, m.τ, and m.Lγ.  Choices for init include  \ninit_ls!(m) (default): initialize by the least squares analytical solution.  \ninit_mom!(m): initialize by the unweighted NLS (MoM).  \nm: initilize from user supplied values in m.τ and m.Lγ.\nruns::Integer: Number of weighted NLS runs; default is 2. Each run will use the    newest m.τ and m.Lγ to update the weight matrices Vi and solve the    new weighted NLS.\nparallel::Bool: Multi-threading or not. Default is false. \nverbose::Bool: Verbose display or not, Default is true.\n\n\n\n\n\n","category":"function"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"WiSER.fit!(vlmm)","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"******************************************************************************\nThis program contains Ipopt, a library for large-scale nonlinear optimization.\n Ipopt is released as open source code under the Eclipse Public License (EPL).\n         For more information visit http://projects.coin-or.org/Ipopt\n******************************************************************************\n\nrun = 1, ‖Δβ‖ = 0.037311, ‖Δτ‖ = 0.166678, ‖ΔL‖ = 0.100999, status = Optimal, time(s) = 0.425396\nrun = 2, ‖Δβ‖ = 0.005220, ‖Δτ‖ = 0.006748, ‖ΔL‖ = 0.048735, status = Optimal, time(s) = 0.354986\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n───────────────────────────────────────────────────────────\n                     Estimate  Std. Error       Z  Pr(>|Z|)\n───────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308       0.14384    739.07    <1e-99\nβ2: agegroup       14.9844      0.0633245  236.63    <1e-99\nβ3: gender: Male   10.0749      0.100279   100.47    <1e-99\nβ4: bmi_std         0.296424    0.0139071   21.31    <1e-99\nβ5: meds: OnMeds  -10.1107      0.122918   -82.26    <1e-99\nτ1: (Intercept)    -2.5212      0.393792    -6.40    <1e-9\nτ2: agegroup        1.50759     0.135456    11.13    <1e-28\nτ3: meds: OnMeds   -0.435225    0.0621076   -7.01    <1e-11\nτ4: bmi_std         0.0052695   0.0224039    0.24    0.8140\n───────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00196    0.0181387\n \"γ2: bmi_std\"      0.0181387  0.000549357","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The estimated coefficients and random effects covariance parameters can be retrieved by","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"coef(vlmm)","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"9-element Array{Float64,1}:\n 106.30828661757685\n  14.984423626292854\n  10.074886642511625\n   0.2964238570056824\n -10.110677648545206\n  -2.5211956122809442\n   1.5075882029978345\n  -0.4352249760976689\n   0.00526950183272128","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"or individually","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"vlmm.β","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"5-element Array{Float64,1}:\n 106.30828661757685\n  14.984423626292854\n  10.074886642511625\n   0.2964238570056824\n -10.110677648545206","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"vlmm.τ","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"4-element Array{Float64,1}:\n -2.5211956122809442\n  1.5075882029978345\n -0.4352249760976689\n  0.00526950183272128","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"vlmm.Σγ","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"2×2 Array{Float64,2}:\n 1.00196    0.0181387\n 0.0181387  0.000549357","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The variance-covariance matrix of the estimated parameters (β, τ, Lγ) can be rerieved by","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"vlmm.vcov","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"12×12 Array{Float64,2}:\n  0.0206899    -0.00753187   -0.00618382   …  -0.000123531   0.0644858\n -0.00753187    0.00400999    0.000152994      4.07896e-5   -0.0194226\n -0.00618382    0.000152994   0.0100558        4.35497e-5   -0.0299542\n  5.60981e-5   -4.80751e-5    0.000108448      8.06623e-6    0.00149567\n -0.00311952   -0.000362412   0.00122535      -7.1571e-5     0.0168424\n -0.00652959    0.00207365    0.00276734   …   0.00217472   -1.70443\n  0.00229271   -0.000743467  -0.000951293     -0.000740359   0.58213\n -0.000719608   0.000263081   0.000294779      0.000197117  -0.152908\n  3.10756e-5    1.70391e-5   -0.00011849      -5.50781e-5    0.0266044\n  0.000166021  -3.24178e-6   -0.00011537       9.0954e-6    -0.00139559\n -0.000123531   4.07896e-5    4.35497e-5   …   7.84536e-5   -0.0244586\n  0.0644858    -0.0194226    -0.0299542       -0.0244586    19.1312","category":"page"},{"location":"#Tips-for-improving-estimation","page":"WiSER.jl","title":"Tips for improving estimation","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"fit! may fail due to various reasons. Often it indicates ill-conditioned data or an inadequate model. Following strategies may improve the fit. ","category":"page"},{"location":"#Standardize-continuous-predictors","page":"WiSER.jl","title":"Standardize continuous predictors","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"In above example, we used the standardardized bmi. If we used the original bmi variable, the estimates of τ are instable, reflected by the large standard errors.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"# using unscaled bmi causes ill-conditioning\nvlmm_bmi = WSVarLmmModel(\n    @formula(sbp ~ 1 + agegroup + gender + bmi + meds), \n    @formula(sbp ~ 1 + bmi), \n    @formula(sbp ~ 1 + agegroup + meds + bmi),\n    :id, df);\nWiSER.fit!(vlmm_bmi)","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"run = 1, ‖Δβ‖ = 0.208950, ‖Δτ‖ = 0.445610, ‖ΔL‖ = 2.027674, status = Optimal, time(s) = 0.876796\nrun = 2, ‖Δβ‖ = 0.032012, ‖Δτ‖ = 0.014061, ‖ΔL‖ = 0.780198, status = Optimal, time(s) = 0.987205\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n────────────────────────────────────────────────────────────\n                      Estimate  Std. Error       Z  Pr(>|Z|)\n────────────────────────────────────────────────────────────\nβ1: (Intercept)   100.131        0.319906   313.00    <1e-99\nβ2: agegroup       14.9844       0.0633245  236.63    <1e-99\nβ3: gender: Male   10.0749       0.100279   100.47    <1e-99\nβ4: bmi             0.246808     0.0115793   21.31    <1e-99\nβ5: meds: OnMeds  -10.1107       0.122918   -82.26    <1e-99\nτ1: (Intercept)    -2.63101     17.2804      -0.15    0.8790\nτ2: agegroup        1.50759      5.69286      0.26    0.7911\nτ3: meds: OnMeds   -0.435225     1.37021     -0.32    0.7508\nτ4: bmi             0.00438748   0.0281074    0.16    0.8760\n────────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  0.484542    0.00557087\n \"γ2: bmi\"          0.00557087  0.000380843","category":"page"},{"location":"#Increase-runs","page":"WiSER.jl","title":"Increase runs","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"Increasing runs (default is 2) takes more computing resources but can be useful to get more precise estimates. If we set runs=3 when using original bmi (ill-conditioned), the estimated τ are more accurate. The estimate of Σγ is still off though.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"# improve estimates from ill-conditioned data by more runs\nWiSER.fit!(vlmm_bmi, runs=3)","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"run = 1, ‖Δβ‖ = 0.208950, ‖Δτ‖ = 0.445610, ‖ΔL‖ = 2.027674, status = Optimal, time(s) = 0.850399\nrun = 2, ‖Δβ‖ = 0.032012, ‖Δτ‖ = 0.014061, ‖ΔL‖ = 0.780198, status = Optimal, time(s) = 1.060520\nrun = 3, ‖Δβ‖ = 0.008059, ‖Δτ‖ = 0.099534, ‖ΔL‖ = 0.696869, status = Optimal, time(s) = 1.127406\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n─────────────────────────────────────────────────────────────\n                       Estimate  Std. Error       Z  Pr(>|Z|)\n─────────────────────────────────────────────────────────────\nβ1: (Intercept)   100.139         0.315745   317.15    <1e-99\nβ2: agegroup       14.9839        0.0633172  236.65    <1e-99\nβ3: gender: Male   10.0753        0.10027    100.48    <1e-99\nβ4: bmi             0.246528      0.0114083   21.61    <1e-99\nβ5: meds: OnMeds  -10.1109        0.122778   -82.35    <1e-99\nτ1: (Intercept)    -2.53158       0.866855    -2.92    0.0035\nτ2: agegroup        1.50917       0.031734    47.56    <1e-99\nτ3: meds: OnMeds   -0.436745      0.0513571   -8.50    <1e-16\nτ4: bmi             0.000277851   0.0363866    0.01    0.9939\n─────────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  3.48717e-48  7.26846e-26\n \"γ2: bmi\"          7.26846e-26  0.00155716","category":"page"},{"location":"#Try-different-nonlinear-programming-(NLP)-solvers","page":"WiSER.jl","title":"Try different nonlinear programming (NLP) solvers","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"A different solver may remedy the issue. By default, MiSER.jl uses the Ipopt solver, but it can use any solver that supports MathProgBase.jl. Check documentation of fit! for commonly used NLP solvers. In our experience, Knitro.jl works the best, but it is a commercial software.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"# print Ipopt iterates for diagnostics\nWiSER.fit!(vlmm, Ipopt.IpoptSolver(print_level=5, mehrotra_algorithm=\"yes\"))","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"This is Ipopt version 3.13.2, running with linear solver mumps.\nNOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n\nNumber of nonzeros in equality constraint Jacobian...:        0\nNumber of nonzeros in inequality constraint Jacobian.:        0\nNumber of nonzeros in Lagrangian Hessian.............:       28\n\nTotal number of variables............................:        7\n                     variables with only lower bounds:        0\n                variables with lower and upper bounds:        0\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:        0\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  5.6575142e+04 0.00e+00 5.30e+04   0.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1  3.4931954e+04 0.00e+00 1.43e+04 -11.0 2.07e+00    -  1.00e+00 1.00e+00f  1\n   2  3.0285692e+04 0.00e+00 4.18e+03 -11.0 5.46e-01    -  1.00e+00 1.00e+00f  1\n   3  2.9124181e+04 0.00e+00 1.87e+03 -11.0 2.78e-01    -  1.00e+00 1.00e+00f  1\n   4  2.8571986e+04 0.00e+00 6.41e+02 -11.0 2.38e-01    -  1.00e+00 1.00e+00f  1\n   5  2.8379415e+04 0.00e+00 1.62e+02 -11.0 2.91e-01    -  1.00e+00 1.00e+00f  1\n   6  2.8328064e+04 0.00e+00 4.31e+01 -11.0 3.09e-01    -  1.00e+00 1.00e+00f  1\n   7  2.8315452e+04 0.00e+00 1.13e+01 -11.0 3.02e-01    -  1.00e+00 1.00e+00f  1\n   8  2.8312446e+04 0.00e+00 4.59e+00 -11.0 2.76e-01    -  1.00e+00 1.00e+00f  1\n   9  2.8311807e+04 0.00e+00 1.87e+00 -11.0 2.28e-01    -  1.00e+00 1.00e+00f  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  10  2.8311705e+04 0.00e+00 5.50e-01 -11.0 1.52e-01    -  1.00e+00 1.00e+00f  1\n  11  2.8311697e+04 0.00e+00 7.11e-02 -11.0 6.21e-02    -  1.00e+00 1.00e+00f  1\n  12  2.8311697e+04 0.00e+00 1.34e-03 -11.0 8.86e-03    -  1.00e+00 1.00e+00f  1\n  13  2.8311697e+04 0.00e+00 1.53e-05 -11.0 1.62e-04    -  1.00e+00 1.00e+00f  1\n  14  2.8311697e+04 0.00e+00 2.18e-07 -11.0 8.29e-08    -  1.00e+00 1.00e+00f  1\n  15  2.8311697e+04 0.00e+00 1.13e-08 -11.0 3.75e-10    -  1.00e+00 1.00e+00f  1\n  16  2.8311697e+04 0.00e+00 3.05e-10 -11.0 2.12e-11    -  1.00e+00 1.00e+00f  1\n\nNumber of Iterations....: 16\n\n                                   (scaled)                 (unscaled)\nObjective...............:   1.6226171160601305e+04    2.8311697021847409e+04\nDual infeasibility......:   3.0454227901697596e-10    5.3137050315399392e-10\nConstraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00\nOverall NLP error.......:   3.0454227901697596e-10    5.3137050315399392e-10\n\n\nNumber of objective function evaluations             = 17\nNumber of objective gradient evaluations             = 17\nNumber of equality constraint evaluations            = 0\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 0\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 16\nTotal CPU secs in IPOPT (w/o function evaluations)   =      0.031\nTotal CPU secs in NLP function evaluations           =      0.346\n\nEXIT: Optimal Solution Found.\nrun = 1, ‖Δβ‖ = 0.037311, ‖Δτ‖ = 0.166678, ‖ΔL‖ = 0.100999, status = Optimal, time(s) = 0.330199\nThis is Ipopt version 3.13.2, running with linear solver mumps.\nNOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n\nNumber of nonzeros in equality constraint Jacobian...:        0\nNumber of nonzeros in inequality constraint Jacobian.:        0\nNumber of nonzeros in Lagrangian Hessian.............:       28\n\nTotal number of variables............................:        7\n                     variables with only lower bounds:        0\n                variables with lower and upper bounds:        0\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:        0\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  8.8973092e+04 0.00e+00 2.21e+05   0.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1  4.3429572e+04 0.00e+00 6.17e+04 -11.0 2.38e+00    -  1.00e+00 1.00e+00f  1\n   2  4.2299630e+04 0.00e+00 5.28e+04 -11.0 5.57e-01    -  1.00e+00 1.00e+00f  1\n   3  3.2423451e+04 0.00e+00 1.96e+04 -11.0 5.34e-01    -  1.00e+00 1.00e+00f  1\n   4  2.8893365e+04 0.00e+00 6.24e+03 -11.0 2.85e-01    -  1.00e+00 1.00e+00f  1\n   5  2.7767774e+04 0.00e+00 2.56e+03 -11.0 2.67e-01    -  1.00e+00 1.00e+00f  1\n   6  2.7349272e+04 0.00e+00 8.84e+02 -11.0 2.79e-01    -  1.00e+00 1.00e+00f  1\n   7  2.7218041e+04 0.00e+00 2.32e+02 -11.0 3.08e-01    -  1.00e+00 1.00e+00f  1\n   8  2.7182533e+04 0.00e+00 5.14e+01 -11.0 3.24e-01    -  1.00e+00 1.00e+00f  1\n   9  2.7173294e+04 0.00e+00 1.62e+01 -11.0 3.27e-01    -  1.00e+00 1.00e+00f  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  10  2.7170863e+04 0.00e+00 8.25e+00 -11.0 3.25e-01    -  1.00e+00 1.00e+00f  1\n  11  2.7170227e+04 0.00e+00 4.19e+00 -11.0 3.19e-01    -  1.00e+00 1.00e+00f  1\n  12  2.7170063e+04 0.00e+00 2.08e+00 -11.0 3.09e-01    -  1.00e+00 1.00e+00f  1\n  13  2.7170022e+04 0.00e+00 9.97e-01 -11.0 2.89e-01    -  1.00e+00 1.00e+00f  1\n  14  2.7170013e+04 0.00e+00 4.38e-01 -11.0 2.53e-01    -  1.00e+00 1.00e+00f  1\n  15  2.7170011e+04 0.00e+00 1.56e-01 -11.0 1.91e-01    -  1.00e+00 1.00e+00f  1\n  16  2.7170011e+04 0.00e+00 3.31e-02 -11.0 1.04e-01    -  1.00e+00 1.00e+00f  1\n  17  2.7170011e+04 0.00e+00 1.88e-03 -11.0 2.70e-02    -  1.00e+00 1.00e+00f  1\n  18  2.7170011e+04 0.00e+00 1.49e-05 -11.0 1.57e-03    -  1.00e+00 1.00e+00f  1\n  19  2.7170011e+04 0.00e+00 5.09e-07 -11.0 5.31e-06    -  1.00e+00 1.00e+00f  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  20  2.7170011e+04 0.00e+00 9.99e-09 -11.0 1.26e-08    -  1.00e+00 1.00e+00f  1\n\nNumber of Iterations....: 20\n\n                                   (scaled)                 (unscaled)\nObjective...............:   2.7170011141753250e+04    2.7170011141753250e+04\nDual infeasibility......:   9.9916355189577644e-09    9.9916355189577644e-09\nConstraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00\nOverall NLP error.......:   9.9916355189577644e-09    9.9916355189577644e-09\n\n\nNumber of objective function evaluations             = 21\nNumber of objective gradient evaluations             = 21\nNumber of equality constraint evaluations            = 0\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 0\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 20\nTotal CPU secs in IPOPT (w/o function evaluations)   =      0.020\nTotal CPU secs in NLP function evaluations           =      0.358\n\nEXIT: Optimal Solution Found.\nrun = 2, ‖Δβ‖ = 0.005220, ‖Δτ‖ = 0.006748, ‖ΔL‖ = 0.048735, status = Optimal, time(s) = 0.384719\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n───────────────────────────────────────────────────────────\n                     Estimate  Std. Error       Z  Pr(>|Z|)\n───────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308       0.14384    739.07    <1e-99\nβ2: agegroup       14.9844      0.0633245  236.63    <1e-99\nβ3: gender: Male   10.0749      0.100279   100.47    <1e-99\nβ4: bmi_std         0.296424    0.0139071   21.31    <1e-99\nβ5: meds: OnMeds  -10.1107      0.122918   -82.26    <1e-99\nτ1: (Intercept)    -2.5212      0.393792    -6.40    <1e-9\nτ2: agegroup        1.50759     0.135456    11.13    <1e-28\nτ3: meds: OnMeds   -0.435225    0.0621076   -7.01    <1e-11\nτ4: bmi_std         0.0052695   0.0224039    0.24    0.8140\n───────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00196    0.0181387\n \"γ2: bmi_std\"      0.0181387  0.000549357","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"# use Knitro (require installation of Knitro software and Knitro.jl)\n# WiSER.fit!(vlmm, KNITRO.KnitroSolver(outlev=3));","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"# use NLopt\nWiSER.fit!(vlmm, NLopt.NLoptSolver(algorithm=:LD_MMA, maxeval=4000))","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"run = 1, ‖Δβ‖ = 0.037311, ‖Δτ‖ = 0.162196, ‖ΔL‖ = 0.100050, status = Optimal, time(s) = 0.571036\nrun = 2, ‖Δβ‖ = 0.005248, ‖Δτ‖ = 0.008742, ‖ΔL‖ = 0.001334, status = Optimal, time(s) = 0.185684\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n────────────────────────────────────────────────────────────\n                      Estimate  Std. Error       Z  Pr(>|Z|)\n────────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308        0.14384    739.07    <1e-99\nβ2: agegroup       14.9844       0.0633238  236.63    <1e-99\nβ3: gender: Male   10.0749       0.100277   100.47    <1e-99\nβ4: bmi_std         0.296421     0.0139114   21.31    <1e-99\nβ5: meds: OnMeds  -10.1106       0.122912   -82.26    <1e-99\nτ1: (Intercept)    -2.53263      0.102706   -24.66    <1e-99\nτ2: agegroup        1.51161      0.0388869   38.87    <1e-99\nτ3: meds: OnMeds   -0.435897     0.0524849   -8.31    <1e-16\nτ4: bmi_std         0.00576945   0.0218517    0.26    0.7918\n────────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00228    0.0179118\n \"γ2: bmi_std\"      0.0179118  0.00441753","category":"page"},{"location":"#Try-different-starting-points","page":"WiSER.jl","title":"Try different starting points","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"Initialization matters as well. By default, fit! uses a crude least squares estimate as the starting point. We can also try a method of moment estimate or user-supplied values.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"# MoM starting point\nWiSER.fit!(vlmm, init = init_mom!(vlmm))","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"run = 1, ‖Δβ‖ = 0.036245, ‖Δτ‖ = 0.188207, ‖ΔL‖ = 0.127483, status = Optimal, time(s) = 0.256069\nrun = 2, ‖Δβ‖ = 0.006798, ‖Δτ‖ = 0.009128, ‖ΔL‖ = 0.050049, status = Optimal, time(s) = 0.340028\n\n\n\n\n\n\nWithin-subject variance estimation by robust regression (WiSER)\nNumber of individuals/clusters: 500\nTotal observations: 5011\n\nFixed-effects parameters:\n────────────────────────────────────────────────────────────\n                      Estimate  Std. Error       Z  Pr(>|Z|)\n────────────────────────────────────────────────────────────\nβ1: (Intercept)   106.308        0.143831   739.12    <1e-99\nβ2: agegroup       14.9846       0.063327   236.62    <1e-99\nβ3: gender: Male   10.0747       0.100282   100.46    <1e-99\nβ4: bmi_std         0.296596     0.013989    21.20    <1e-99\nβ5: meds: OnMeds  -10.1107       0.122973   -82.22    <1e-99\nτ1: (Intercept)    -2.52233      0.218068   -11.57    <1e-30\nτ2: agegroup        1.5079       0.0759423   19.86    <1e-87\nτ3: meds: OnMeds   -0.434951     0.0549139   -7.92    <1e-14\nτ4: bmi_std         0.00527178   0.0220323    0.24    0.8109\n────────────────────────────────────────────────────────────\nRandom effects covariance matrix Σγ:\n \"γ1: (Intercept)\"  1.00193    0.0180064\n \"γ2: bmi_std\"      0.0180064  0.000967577","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"# user-supplied starting point in vlmm.β, vlmm.τ, vlmm.Lγ\n# WiSER.fit!(vlmm, init = vlmm)","category":"page"},{"location":"#Simulating-responses","page":"WiSER.jl","title":"Simulating responses","text":"","category":"section"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The rvarlmm() and rvarlmm!() functions can be used to generate a respone from user-supplied data and parameters. The rand!() command can be used to overwrite the response in a VarLmmModel object based on the parameters and optional user-supplied distribution.   ","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The rand!(m::WSVarLmmModel; respdist = MvNormal, γωdist = MvNormal, Σγω = [], kwargs...) function replaces the responses m.data[i].y with a simulated response based on:","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The data in the model object's data X, Z, W matrices. \nThe parameter values in the model.\nThe condistribution distribution of the response given the random effects.\nThe distribution of the random effects.\nIf simulating from MvTDistribution, you must specify the degrees of freedom via df = x.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The rvarlmm() takes arrays of matricies of the data in addition to the reponse. It generates a simulated response from the VarLMM model based on:","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"Xs: array of each clusters X: mean fixed effects covariates\nZs: array of each clusters Z: random location effects covariates\nWs: array of each clusters W: within-subject variance fixed effects covariates\nβ: mean fixed effects vector\nτ: within-subject variance fixed effects vector\nrespdist: the distribution for response. Default is MvNormal. \nΣγ: random location effects covariance matrix. \nΣγω: joint random location and random scale effects covariance matrix (if generating from full model).\nIf simulating from MvTDistribution, you must specify the degrees of freedom via df = x.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"The rvarlmm!() function can be used to generate a simulated response from the VarLMM model based on a datatable and place the generated response into the datatable with the respname field. ","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"Note: the datatable MUST be ordered by grouping variable for it to generate in the correct order. This can be checked via datatable == sort(datatable, idvar). The response is based on:","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"meanformula: represents the formula for the mean fixed effects β (variables in X matrix)\nreformula: represents the formula for the mean random effects γ (variables in Z matrix)\nwsvarformula: represents the formula for the within-subject variance fixed effects τ (variables in W matrix)\nidvar: the id variable for groupings.\ndatatable: the data table holding all of the data for the model. For this function it must be in order.\nβ: mean fixed effects vector\nτ: within-subject variance fixed effects vector\nrespdist: the distribution for response. Default is MvNormal. \nΣγ: random location effects covariance matrix. \nΣγω: joint random location and random scale effects covariance matrix (if generating from full model)\nrespname: symbol representing the simulated response variable name.\nIf simulating from MvTDistribution, you must specify the degrees of freedom via df = x.","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"For both functions, only one of the Σγ or Σγω matrices have to be specified in order to use the function. Σγ can be used to specify that the generative model will not include a random scale component. It outputs ys: an array of reponse y that match the order of the data arrays (Xs, Zs, Ws).","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"@show vlmm.data[1].y\nRandom.seed!(123)\nWiSER.rand!(vlmm; respdist = MvNormal) \n@show vlmm.data[1].y","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"(vlmm.data[1]).y = [159.58635186701068, 161.84850248386945, 160.48359574389164, 161.13448128282593, 165.44341004850986, 160.05302471176626, 162.1001598920002, 163.1526453898974, 166.6749897477845]\n(vlmm.data[1]).y = [163.18878816959145, 161.92583955740076, 160.66341989866248, 165.16516161135553, 162.25415689993756, 163.00335025501857, 162.06896794235755, 161.4110226386001, 160.57277004398432]\n\n\n\n\n\n9-element Array{Float64,1}:\n 163.18878816959145\n 161.92583955740076\n 160.66341989866248\n 165.16516161135553\n 162.25415689993756\n 163.00335025501857\n 162.06896794235755\n 161.4110226386001\n 160.57277004398432","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"t = table((id = [1; 1; 2; 3; 3; 3; 4], y = randn(7),\nx1 = ones(7), x2 = randn(7), x3 = randn(7), z1 = ones(7),\nz2 = randn(7), w1 = ones(7), w2 = randn(7), w3 = randn(7)))\ndf = DataFrame(t)\n\nf1 = @formula(y ~ 1 + x2 + x3)\nf2 = @formula(y ~ 1 + z2)\nf3 = @formula(y ~ 1 + w2 + w3)\n\nβ = zeros(3)\nτ = zeros(3)\nΣγ = [1. 0.; 0. 1.]\n\nfirst(df, 3)","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"<table class=\"data-frame\"><thead><tr><th></th><th>id</th><th>y</th><th>x1</th><th>x2</th><th>x3</th><th>z1</th><th>z2</th><th>w1</th><th>w2</th></tr><tr><th></th><th>Int64</th><th>Float64</th><th>Float64</th><th>Float64</th><th>Float64</th><th>Float64</th><th>Float64</th><th>Float64</th><th>Float64</th></tr></thead><tbody><p>3 rows × 10 columns (omitted printing of 1 columns)</p><tr><th>1</th><td>1</td><td>1.54783</td><td>1.0</td><td>0.268209</td><td>-0.0571664</td><td>1.0</td><td>0.222619</td><td>1.0</td><td>1.17759</td></tr><tr><th>2</th><td>1</td><td>0.365508</td><td>1.0</td><td>1.17666</td><td>-0.204264</td><td>1.0</td><td>1.0579</td><td>1.0</td><td>0.431064</td></tr><tr><th>3</th><td>2</td><td>-0.31447</td><td>1.0</td><td>0.453137</td><td>-0.402403</td><td>1.0</td><td>-1.65662</td><td>1.0</td><td>-0.216927</td></tr></tbody></table>","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"rvarlmm!(f1, f2, f3, :id, df, β, τ;\n        Σγ = Σγ, respname = :response)\ndf[!, :response]","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"7-element Array{Float64,1}:\n -1.1362274345153838\n -2.0396426949163917\n -3.0297957994022724\n  0.7967897326514723\n  1.1225160002462085\n  1.2517509664063533\n  0.34088047862482207","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"Note: JuliaDB's IndexedTables elements cannot be mutated. If you use the rvarlmm!() function with a JuliaDB table, you must reassign the datatable to the output as shown below:","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"t = rvarlmm!(f1, f2, f3, :id, t, β, τ;\n        Σγ = Σγ, respname = :response)","category":"page"},{"location":"","page":"WiSER.jl","title":"WiSER.jl","text":"Table with 7 rows, 11 columns:\nColumns:\n\u001b[1m#   \u001b[22m\u001b[1mcolname   \u001b[22m\u001b[1mtype\u001b[22m\n─────────────────────\n1   id        Int64\n2   y         Float64\n3   x1        Float64\n4   x2        Float64\n5   x3        Float64\n6   z1        Float64\n7   z2        Float64\n8   w1        Float64\n9   w2        Float64\n10  w3        Float64\n11  response  Float64","category":"page"}]
}
